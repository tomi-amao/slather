// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Core application models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // Added for credentials authentication
  bio           String?
  location      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts  Account[]
  sessions  Session[]
  sandwiches Sandwich[]
  ratings    Rating[]
  comments   Comment[]
  likes      Like[]
  followers  Follow[] @relation("UserFollowers")
  following  Follow[] @relation("UserFollowing")
}

model Follow {
  id          String @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model Restaurant {
  id          String @id @default(cuid())
  name        String
  address     String?
  city        String?
  state       String?
  country     String?
  cuisine     String?
  website     String?
  phone       String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  sandwiches Sandwich[]

  @@index([name])
  @@index([city, state])
}

model Sandwich {
  id          String      @id @default(cuid())
  title       String
  description String?
  type        SandwichType @default(RESTAURANT)
  images      String[]    // Array of image URLs
  ingredients String[]    // Array of ingredients for homemade sandwiches
  price       Float?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Foreign keys
  userId       String
  restaurantId String?

  // Relations
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurant Restaurant? @relation(fields: [restaurantId], references: [id])
  ratings    Rating[]
  comments   Comment[]
  likes      Like[]

  @@index([userId])
  @@index([restaurantId])
  @@index([type])
  @@index([createdAt])
}

model Rating {
  id           String @id @default(cuid())
  taste        Int    @default(0) // 1-5 scale
  presentation Int    @default(0) // 1-5 scale
  value        Int    @default(0) // 1-5 scale
  overall      Float  @default(0) // Calculated average
  review       String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Foreign keys
  userId     String
  sandwichId String

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sandwich Sandwich @relation(fields: [sandwichId], references: [id], onDelete: Cascade)

  @@unique([userId, sandwichId]) // One rating per user per sandwich
  @@index([sandwichId])
  @@index([overall])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign keys
  userId     String
  sandwichId String
  parentId   String? // For nested comments

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  sandwich Sandwich  @relation(fields: [sandwichId], references: [id], onDelete: Cascade)
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")

  @@index([sandwichId])
  @@index([userId])
  @@index([createdAt])
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Foreign keys
  userId     String
  sandwichId String

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sandwich Sandwich @relation(fields: [sandwichId], references: [id], onDelete: Cascade)

  @@unique([userId, sandwichId]) // One like per user per sandwich
  @@index([sandwichId])
}

enum SandwichType {
  RESTAURANT
  HOMEMADE
}
